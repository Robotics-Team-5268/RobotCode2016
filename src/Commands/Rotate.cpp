// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Commands/Rotate.h"
#include "Subsystems/Drive.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Rotate::Rotate(): Command(), degrees(), gyroAngle(), pid() {

}
Rotate::Rotate(float amount): Command(), gyroAngle(0) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drive.get());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	pid = nullptr;
	degrees = amount;
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void Rotate::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void Rotate::Execute() {

	if(pid){
		SmartDashboard::PutNumber("P", pid->GetP());
		SmartDashboard::PutNumber("I", pid->GetI());
		SmartDashboard::PutNumber("D", pid->GetD());
		SmartDashboard::PutNumber("F", pid->GetF());
	}else{
		pid = new PIDController(
							SmartDashboard::GetNumber("P", .03),
							SmartDashboard::GetNumber("I", .005),
							SmartDashboard::GetNumber("D", .01),
							SmartDashboard::GetNumber("F", 0),
							Robot::drive->getGyro(),
							new RotatePIDOutput());
		pid->SetInputRange(-180, 180);
		pid->SetOutputRange(-.5, .5);
		pid->SetAbsoluteTolerance(3);
		pid->Enable();
		pid->SetSetpoint(degrees);
	}


	/*
	if(degrees - fmod(Robot::drive->returnAngle(), 360) > 0 && degrees - fmod(Robot::drive->returnAngle(), 360) <= 180)
	{
		Robot::drive->setMotors(.3, -.3); //Left speed is first, right speed second
	}
	else
	{
		Robot::drive->setMotors(-.3, .3);
	}
	*/
}

// Make this return true when this Command no longer needs to run execute()
bool Rotate::IsFinished() {
	/*
	if(degrees - fmod(Robot::drive->returnAngle(), 360) < 5)
	{
		return true;
	}
	else
	{
		return false;
	}
	*/
	return pid->OnTarget();
}

// Called once after isFinished returns true
void Rotate::End() {
	pid->Disable();
	delete pid;
	pid = nullptr;
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Rotate::Interrupted() {
End();
}
void RotatePIDOutput::PIDWrite(float a)
{
Robot::drive->setMotors(a, -a);
}
RotatePIDOutput::~RotatePIDOutput(){}
